{"version":3,"file":"index.js","sources":["../src/context/SEOContext.tsx","../src/utils/helpers.ts","../src/components/PageSEO.tsx","../src/components/SEOHead.tsx","../src/components/SEOProvider.tsx"],"sourcesContent":["import React, {\r\n  createContext,\r\n  // useState,\r\n  useContext,\r\n} from \"react\";\r\nimport {\r\n  SEOContextProps,\r\n  // SEOMetadata\r\n} from \"../types\";\r\n\r\n// Create context with default values\r\nconst SEOContext = createContext<SEOContextProps>({\r\n  defaultSEO: { title: \"\" },\r\n  currentSEO: null,\r\n  updateCurrentSEO: () => {},\r\n  clearCurrentSEO: () => {},\r\n});\r\n\r\n/**\r\n * Hook to use the SEO context\r\n * @returns SEO context values and methods\r\n */\r\nexport const useSEO = (): SEOContextProps => {\r\n  const context = useContext(SEOContext);\r\n\r\n  if (!context) {\r\n    throw new Error(\"useSEO must be used within an SEOProvider\");\r\n  }\r\n\r\n  return context;\r\n};\r\n\r\nexport default SEOContext;\r\n","import { SEOMetadata, OpenGraphImage, MetaTag } from \"../types\";\r\n\r\n/**\r\n * Deep merge two objects\r\n * @param target - Target object\r\n * @param source - Source object\r\n * @returns Merged object\r\n */\r\ntype DeepPartial<T> = {\r\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\r\n};\r\n\r\n// Helper to check if something is a plain object (not array, null, etc.)\r\nconst isPlainObject = (obj: any): obj is Record<string, any> => {\r\n  return obj && typeof obj === \"object\" && !Array.isArray(obj);\r\n};\r\n\r\nexport const deepMerge = <T extends Record<string, any>>(\r\n  target: T,\r\n  source: DeepPartial<T>\r\n): T => {\r\n  // Create a new object to avoid mutations\r\n  const output: any = { ...target } as T;\r\n\r\n  if (!source) {\r\n    return output;\r\n  }\r\n\r\n  Object.keys(source).forEach((key) => {\r\n    // Safe way to index with string keys\r\n    if (key in source) {\r\n      const targetValue = target[key];\r\n      const sourceValue = source[key as keyof DeepPartial<T>];\r\n\r\n      // If both values are objects, recursively merge them\r\n      if (isPlainObject(targetValue) && isPlainObject(sourceValue)) {\r\n        // This cast is safe because we've verified both are objects\r\n        output[key] = deepMerge(\r\n          targetValue,\r\n          sourceValue as DeepPartial<typeof targetValue>\r\n        );\r\n      }\r\n      // Otherwise use source value if defined, or keep target value\r\n      else if (sourceValue !== undefined) {\r\n        // Using type assertion to handle the assignment\r\n        output[key] = sourceValue as any;\r\n      }\r\n    }\r\n  });\r\n\r\n  return output;\r\n};\r\n\r\n/**\r\n * Format OpenGraph image to meta tags\r\n * @param image - OpenGraph image or images\r\n * @returns Array of meta tags\r\n */\r\nexport const formatOpenGraphImage = (\r\n  image?: OpenGraphImage | OpenGraphImage[]\r\n): MetaTag[] => {\r\n  if (!image) {\r\n    return [];\r\n  }\r\n\r\n  const images = Array.isArray(image) ? image : [image];\r\n\r\n  return images.reduce<MetaTag[]>((acc, img, index) => {\r\n    const prefix = index === 0 ? \"og:image\" : `og:image:0${index + 1}`;\r\n\r\n    const tags: MetaTag[] = [{ property: prefix, content: img.url }];\r\n\r\n    if (img.alt) {\r\n      tags.push({ property: `${prefix}:alt`, content: img.alt });\r\n    }\r\n\r\n    if (img.width) {\r\n      tags.push({ property: `${prefix}:width`, content: String(img.width) });\r\n    }\r\n\r\n    if (img.height) {\r\n      tags.push({ property: `${prefix}:height`, content: String(img.height) });\r\n    }\r\n\r\n    if (img.type) {\r\n      tags.push({ property: `${prefix}:type`, content: img.type });\r\n    }\r\n\r\n    return [...acc, ...tags];\r\n  }, []);\r\n};\r\n\r\n/**\r\n * Generate meta tags for SEO metadata\r\n * @param seo - SEO metadata\r\n * @returns Array of meta tags\r\n */\r\nexport const generateMetaTags = (seo: SEOMetadata): MetaTag[] => {\r\n  const tags: MetaTag[] = [];\r\n\r\n  // Basic meta tags\r\n  if (seo.description) {\r\n    tags.push({ name: \"description\", content: seo.description });\r\n  }\r\n\r\n  // Robots meta tags\r\n  const robotsContent: string[] = [];\r\n  if (seo.noIndex) robotsContent.push(\"noindex\");\r\n  if (seo.noFollow) robotsContent.push(\"nofollow\");\r\n\r\n  if (robotsContent.length > 0) {\r\n    tags.push({ name: \"robots\", content: robotsContent.join(\", \") });\r\n  }\r\n\r\n  // OpenGraph tags\r\n  if (seo.openGraph) {\r\n    const { openGraph } = seo;\r\n\r\n    if (openGraph.title || seo.title) {\r\n      tags.push({\r\n        property: \"og:title\",\r\n        content: openGraph.title || seo.title,\r\n      });\r\n    }\r\n\r\n    if (openGraph.description || seo.description) {\r\n      tags.push({\r\n        property: \"og:description\",\r\n        content: openGraph.description || seo.description || \"\",\r\n      });\r\n    }\r\n\r\n    if (openGraph.url) {\r\n      tags.push({ property: \"og:url\", content: openGraph.url });\r\n    } else if (seo.canonical) {\r\n      tags.push({ property: \"og:url\", content: seo.canonical });\r\n    }\r\n\r\n    if (openGraph.type) {\r\n      tags.push({ property: \"og:type\", content: openGraph.type });\r\n    }\r\n\r\n    if (openGraph.siteName) {\r\n      tags.push({ property: \"og:site_name\", content: openGraph.siteName });\r\n    }\r\n\r\n    if (openGraph.locale) {\r\n      tags.push({ property: \"og:locale\", content: openGraph.locale });\r\n    }\r\n\r\n    // Handle OG images\r\n    if (openGraph.image) {\r\n      const imageTags = formatOpenGraphImage(openGraph.image);\r\n      tags.push(...imageTags);\r\n    }\r\n  }\r\n\r\n  // Twitter tags\r\n  if (seo.twitter) {\r\n    const { twitter } = seo;\r\n\r\n    if (twitter.cardType) {\r\n      tags.push({ name: \"twitter:card\", content: twitter.cardType });\r\n    }\r\n\r\n    if (twitter.handle) {\r\n      tags.push({ name: \"twitter:creator\", content: twitter.handle });\r\n    }\r\n\r\n    if (twitter.site) {\r\n      tags.push({ name: \"twitter:site\", content: twitter.site });\r\n    }\r\n\r\n    if (twitter.title || seo.title) {\r\n      tags.push({\r\n        name: \"twitter:title\",\r\n        content: twitter.title || seo.title,\r\n      });\r\n    }\r\n\r\n    if (twitter.description || seo.description) {\r\n      tags.push({\r\n        name: \"twitter:description\",\r\n        content: twitter.description || seo.description || \"\",\r\n      });\r\n    }\r\n\r\n    if (twitter.image) {\r\n      tags.push({ name: \"twitter:image\", content: twitter.image });\r\n\r\n      if (twitter.imageAlt) {\r\n        tags.push({ name: \"twitter:image:alt\", content: twitter.imageAlt });\r\n      }\r\n    }\r\n  }\r\n\r\n  // Add any additional meta tags\r\n  if (seo.additionalMetaTags) {\r\n    tags.push(...seo.additionalMetaTags);\r\n  }\r\n\r\n  return tags;\r\n};\r\n\r\n/**\r\n * Format JSON-LD script content\r\n * @param jsonLd - JSON-LD data\r\n * @returns Formatted JSON-LD string\r\n */\r\nexport const formatJsonLd = (jsonLd?: string | Record<string, any>): string => {\r\n  if (!jsonLd) {\r\n    return \"\";\r\n  }\r\n\r\n  if (typeof jsonLd === \"string\") {\r\n    return jsonLd;\r\n  }\r\n\r\n  return JSON.stringify(jsonLd);\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useSEO } from \"../context/SEOContext\";\r\nimport { PageSEOProps, SEOMetadata } from \"../types\";\r\nimport { deepMerge } from \"../utils/helpers\";\r\n\r\n/**\r\n * Component to set SEO metadata for a specific page\r\n */\r\nconst PageSEO: React.FC<PageSEOProps> = ({ seo, merge = true }) => {\r\n  const { defaultSEO, updateCurrentSEO, clearCurrentSEO } = useSEO();\r\n\r\n  useEffect(() => {\r\n    // If merge is true, merge with default SEO\r\n    // Otherwise, use the provided SEO as is\r\n    const pageSEO: SEOMetadata = merge ? deepMerge(defaultSEO, seo) : seo;\r\n\r\n    // Update current SEO\r\n    updateCurrentSEO(pageSEO);\r\n\r\n    // Clean up when component unmounts\r\n    return () => {\r\n      clearCurrentSEO();\r\n    };\r\n  }, [seo, merge, defaultSEO, updateCurrentSEO, clearCurrentSEO]);\r\n\r\n  // This component doesn't render anything\r\n  return null;\r\n};\r\n\r\nexport { PageSEO };\r\nexport default PageSEO;\r\n","import React from \"react\";\r\nimport { useSEO } from \"../context/SEOContext\";\r\nimport { SEOHeadProps, MetaTag } from \"../types\";\r\nimport {\r\n  // deepMerge,\r\n  generateMetaTags,\r\n  formatJsonLd,\r\n} from \"../utils/helpers\";\r\n\r\n/**\r\n * Component to generate and inject SEO tags into the document head\r\n */\r\nconst SEOHead: React.FC<SEOHeadProps> = ({ additionalElements }) => {\r\n  const { defaultSEO, currentSEO } = useSEO();\r\n\r\n  // Use current SEO or default SEO if current is not set\r\n  const activeSEO = currentSEO || defaultSEO;\r\n\r\n  // Generate meta tags based on the active SEO\r\n  const metaTags = generateMetaTags(activeSEO);\r\n\r\n  // Format JSON-LD\r\n  const jsonLdScript = formatJsonLd(activeSEO.jsonLd);\r\n\r\n  return (\r\n    <>\r\n      {/* Title tag */}\r\n      <title>{activeSEO.title}</title>\r\n\r\n      {/* Language */}\r\n      {activeSEO.language && <html lang={activeSEO.language} />}\r\n\r\n      {/* Canonical URL */}\r\n      {activeSEO.canonical && (\r\n        <link rel='canonical' href={activeSEO.canonical} />\r\n      )}\r\n\r\n      {/* Meta tags */}\r\n      {metaTags.map((tag: MetaTag, index: number) => {\r\n        // Create props for meta tag\r\n        const metaProps: Record<string, string> = {\r\n          key: `meta-${index}`,\r\n          content: tag.content,\r\n        };\r\n\r\n        // Add name, property, or http-equiv attribute\r\n        if (tag.name) metaProps.name = tag.name;\r\n        if (tag.property) metaProps.property = tag.property;\r\n        if (tag.httpEquiv) metaProps[\"http-equiv\"] = tag.httpEquiv;\r\n\r\n        return <meta {...metaProps} />;\r\n      })}\r\n\r\n      {/* JSON-LD structured data */}\r\n      {jsonLdScript && (\r\n        <script\r\n          type='application/ld+json'\r\n          dangerouslySetInnerHTML={{ __html: jsonLdScript }}\r\n        />\r\n      )}\r\n\r\n      {/* Additional elements */}\r\n      {additionalElements}\r\n    </>\r\n  );\r\n};\r\n\r\nexport { SEOHead };\r\nexport default SEOHead;\r\n","import React, { useState } from \"react\";\r\nimport SEOContext from \"../context/SEOContext\";\r\nimport { SEOProviderProps, SEOMetadata } from \"../types\";\r\n\r\n/**\r\n * SEO Provider component to provide SEO context to the application\r\n */\r\nconst SEOProvider: React.FC<SEOProviderProps> = ({ defaultSEO, children }) => {\r\n  const [currentSEO, setCurrentSEO] = useState<SEOMetadata | null>(null);\r\n\r\n  /**\r\n   * Update current page's SEO\r\n   * @param seo - SEO metadata\r\n   */\r\n  const updateCurrentSEO = (seo: SEOMetadata) => {\r\n    setCurrentSEO(seo);\r\n  };\r\n\r\n  /**\r\n   * Clear current page's SEO\r\n   */\r\n  const clearCurrentSEO = () => {\r\n    setCurrentSEO(null);\r\n  };\r\n\r\n  return (\r\n    <SEOContext.Provider\r\n      value={{\r\n        defaultSEO,\r\n        currentSEO,\r\n        updateCurrentSEO,\r\n        clearCurrentSEO,\r\n      }}\r\n    >\r\n      {children}\r\n    </SEOContext.Provider>\r\n  );\r\n};\r\n\r\nexport { SEOProvider };\r\nexport default SEOProvider;\r\n"],"names":["SEOContext","createContext","defaultSEO","title","currentSEO","updateCurrentSEO","clearCurrentSEO","useSEO","context","useContext","Error","isPlainObject","obj","Array","isArray","deepMerge","target","source","output","__assign","Object","keys","forEach","key","targetValue","sourceValue","undefined","formatOpenGraphImage","image","reduce","acc","img","index","prefix","concat","tags","property","content","url","alt","push","width","String","height","type","__spreadArray","generateMetaTags","seo","description","name","robotsContent","noIndex","noFollow","length","join","openGraph","canonical","siteName","locale","imageTags","apply","twitter","cardType","handle","site","imageAlt","additionalMetaTags","formatJsonLd","jsonLd","JSON","stringify","_a","_b","merge","_c","useEffect","pageSEO","additionalElements","activeSEO","metaTags","jsonLdScript","React","createElement","Fragment","language","lang","rel","href","map","tag","metaProps","httpEquiv","dangerouslySetInnerHTML","__html","children","useState","setCurrentSEO","Provider","value"],"mappings":"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"}